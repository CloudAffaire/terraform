##---------------------------
##  Terraform: Terragrunt  ##
##---------------------------
## Directory structure for this demo
.
├── module
│   ├── subnet
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   └── vpc
│       ├── main.tf
│       ├── outputs.tf
│       └── variables.tf
├── project
│   ├── dev
│   │   ├── subnet
│   │   │   └── terraform.tfvars
│   │   └── vpc
│   │       └── terraform.tfvars
│   ├── prod
│   │   ├── subnet
│   │   │   └── terraform.tfvars
│   │   └── vpc
│   │       └── terraform.tfvars
│   └── test
│       ├── subnet
│       │   └── terraform.tfvars
│       └── vpc
│           └── terraform.tfvars
└── terraform_backend
    ├── main.tf
    └── terraform.tfstate
    
######################
##install terragrunt##
######################
cd
wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.18.5/terragrunt_linux_386
mv terragrunt_linux_386 /usr/local/bin/terragrunt
chmod +x /usr/local/bin/terragrunt
terragrunt

###########################################################
##Configure terraform backend for remote state management##
###########################################################
## Create a directory and get inside it
mkdir -p terraform/terraform_backend && cd terraform/terraform_backend

## Create backend resources
vi main.tf
------------------
#creates a S3 bucket and a dynamoDB table
provider "aws" {
region = "ap-south-1"
shared_credentials_file = "/home/ec2-user/.aws/credentials"
profile = "default"
}
resource "aws_s3_bucket" "mys3bucket" {
bucket = "my-s3-terraform-backend-cloudaffaire" #needs to be unique across AWS
force_destroy = true
tags {
Name = "S3 bucket for terraform backend state storage"
}
}
resource "aws_dynamodb_table" "mydynamodbtable" {
name = "my-dynamodb-terraform-backend-cloudaffaire"
hash_key = "LockID"
read_capacity = 5
write_capacity = 5
attribute {
name = "LockID"
type = "S"
}
tags {
Name = "dynamoDB table for terraform backend state locking"
}
}
------------------
:wq

## Format code
terraform fmt

## Initialize terraform
terraform init

## Create the resource
terraform apply

## Move to your home directory
cd

##################
##create modules##
##################

##module: vpc##

## Create directory for module
mkdir -p terraform/module/vpc && mkdir -p terraform/module/subnet

## Vpc module resource
vi terraform/module/vpc/main.tf
---------------------------
locals {
tag = "${var.name}_${var.env}_${var.version}_${var.tag}"
}
provider "aws" {
region = "${var.aws_region}"
shared_credentials_file = "${var.shared_credentials_file}"
profile = "${var.profile}"
}
terraform {
backend "s3" {}
}
resource "aws_vpc" "myvpc" {
cidr_block = "${var.vpc_cidr}"
tags {
Name = "${local.tag}"
}
}
---------------------------
:wq

## Vpc module variables
vi terraform/module/vpc/variables.tf
---------------------------
variable "aws_region" {
description = "AWS region where the VPC will be created"
default = "ap-south-1"
}
variable "shared_credentials_file" {
description = "credential file to be used to connect to AWS"
default = "/home/ec2-user/.aws/credentials"
}
variable "profile" {
description = "profile name of the credentials"
default = "default"
}
variable "vpc_cidr" {
description = "CIDR block of VPC"
default = "192.168.0.0/16"
}
variable "name" {
description = "name to be used on all the resources as identifier"
default = ""
}
variable "env" {
description = "application environment"
default = ""
}
variable "tag" {
description = "tag for vpc"
default = ""
}
variable "version" {
description = "application version"
default = ""
}
---------------------------
:wq

## Vpc module output
vi terraform/module/vpc/outputs.tf
---------------------------
output "vpc_id" {
description = "The ID of the VPC"
value = "${aws_vpc.myvpc.id}"
}
---------------------------
:wq

##module: subnet##

## Subnet module resource
vi terraform/module/subnet/main.tf
---------------------------
locals {
tag = "${var.name}_${var.env}_${var.version}_${var.tag}"
}
provider "aws" {
region = "${var.aws_region}"
shared_credentials_file = "${var.shared_credentials_file}"
profile = "${var.profile}"
}
terraform {
backend "s3" {}
}
data "terraform_remote_state" "vpc" {
backend = "s3"
config {
bucket = "my-s3-terraform-backend-cloudaffaire"
key = "${var.name}/${var.env}/${var.version}/vpc/terraform.tfstate"
region = "ap-south-1"
dynamodb_table = "my-dynamodb-terraform-backend-cloudaffaire"
}
}
resource "aws_subnet" "myvpc_subnet" {
vpc_id = "${data.terraform_remote_state.vpc.vpc_id}"
cidr_block = "${var.subnet_cidr}"
availability_zone = "${var.subnet_availability_zone}"
tags {
Name = "${local.tag}"
}
}
---------------------------
:wq

## Subnet module variables
vi terraform/module/subnet/variables.tf
---------------------------
variable "aws_region" {
description = "AWS region where the VPC will be created"
default = "ap-south-1"
}
variable "shared_credentials_file" {
description = "credential file to be used to connect to AWS"
default = "/home/ec2-user/.aws/credentials"
}
variable "profile" {
description = "profile name of the credentials"
default = "default"
}
variable "vpc_id" {
description = "VPC ID"
default = ""
}
variable "subnet_cidr" {
description = "CIDR block for the subnet"
default = ""
}
variable "subnet_availability_zone" {
description = "Availability zone of the subnet"
default = ""
}
variable "name" {
description = "name to be used on all the resources as identifier"
default = ""
}
variable "env" {
description = "application environment"
default = ""
}
variable "tag" {
description = "tag for subnet"
default = ""
}
variable "version" {
description = "application version"
default = ""
}
---------------------------
:wq

## Subnet module output
vi terraform/module/subnet/outputs.tf
---------------------------
output "subnet_id" {
description = "Subnet ID"
value = "${aws_subnet.myvpc_subnet.id}"
}
---------------------------
:wq

## Format code
terraform fmt

###################################
##github configuration for module##
###################################

## login to github and create a repository named terragrunt
## Copy the repository ssh link
## git@github.com:CloudAffaire/terragrunt.git

## Configure github for ssh
ssh-keygen -t rsa -C "cloudaffaire@gmail.com"

## Upload module vpc and subnet to github terragrunt repository
cd terraform/module && git init
git config --local user.name "debjeet" && \
git config --local user.email "debjeet@cloudaffaire.com"
git add .
git commit -m "initial commit"
git remote add origin git@github.com:CloudAffaire/terragrunt.git
git push -u origin master
git tag -a v1.0 -m "myapp version 1.0"
git push origin v1.0
cd
#git push --delete origin v1.0
#git tag --delete v1.0

###################
##create projects##
###################

##project:prod##

## Create project directory for production
mkdir -p terraform/project/prod/vpc/ && mkdir -p terraform/project/prod/subnet/

## Create terraform.tfvars for prod environment of vpc module
vi terraform/project/prod/vpc/terraform.tfvars
--------------------------------------------
terragrunt = {
remote_state {
backend = "s3"
config {
bucket = "my-s3-terraform-backend-cloudaffaire"
key = "myapp/prod/v1/vpc/terraform.tfstate"
region = "ap-south-1"
dynamodb_table = "my-dynamodb-terraform-backend-cloudaffaire"
}
}
terraform {
source = "git::git@github.com:CloudAffaire/terragrunt.git//vpc?ref=v1.0"
}
}
vpc_cidr = "10.0.0.0/16"
aws_region = "ap-south-1"
name = "myapp"
env = "prod"
tag = "vpc"
version = "v1"
--------------------------------------------
:wq

## Create terraform.tfvars for prod environment of subnet module
vi terraform/project/prod/subnet/terraform.tfvars
--------------------------------------------
terragrunt = {
remote_state {
backend = "s3"
config {
bucket = "my-s3-terraform-backend-cloudaffaire"
key = "myapp/prod/v1/subnet/terraform.tfstate"
region = "ap-south-1"
dynamodb_table = "my-dynamodb-terraform-backend-cloudaffaire"
}
}
terraform {
source = "git::git@github.com:CloudAffaire/terragrunt.git//subnet?ref=v1.0"
}
}
subnet_cidr = "10.0.0.0/24"
aws_region = "ap-south-1"
name = "myapp"
env = "prod"
tag = "subnet"
version = "v1"
--------------------------------------------
:wq

## Create prod resources using terragrunt
cd terraform/project/prod/vpc/
terragrunt plan
terragrunt apply
cd ../subnet
terragrunt plan
terragrunt apply
cd

##Project:dev##

## Create project directory for development
mkdir -p terraform/project/dev/vpc/ && mkdir -p terraform/project/dev/subnet/

## Create terraform.tfvars for dev environment of vpc module
vi terraform/project/dev/vpc/terraform.tfvars
--------------------------------------------
terragrunt = {
remote_state {
backend = "s3"
config {
bucket = "my-s3-terraform-backend-cloudaffaire"
key = "myapp/dev/v1/vpc/terraform.tfstate"
region = "ap-south-1"
dynamodb_table = "my-dynamodb-terraform-backend-cloudaffaire"
}
}
terraform {
source = "git::git@github.com:CloudAffaire/terragrunt.git//vpc?ref=v1.0"
}
}
vpc_cidr = "10.0.0.0/16"
aws_region = "ap-south-1"
name = "myapp"
env = "dev"
tag = "vpc"
version = "v1"
--------------------------------------------
:wq

## Create terraform.tfvars for dev environment of subnet module
vi terraform/project/dev/subnet/terraform.tfvars
--------------------------------------------
terragrunt = {
remote_state {
backend = "s3"
config {
bucket = "my-s3-terraform-backend-cloudaffaire"
key = "myapp/dev/v1/subnet/terraform.tfstate"
region = "ap-south-1"
dynamodb_table = "my-dynamodb-terraform-backend-cloudaffaire"
}
}
terraform {
source = "git::git@github.com:CloudAffaire/terragrunt.git//subnet?ref=v1.0"
}
}
subnet_cidr = "10.0.0.0/24"
aws_region = "ap-south-1"
name = "myapp"
env = "dev"
tag = "subnet"
version = "v1"
--------------------------------------------
:wq

## Create dev resources using terragrunt
cd terraform/project/dev/vpc/
terragrunt plan
terragrunt apply
cd ../subnet
terragrunt plan
terragrunt apply
cd

##Project:test##

## Create project directory for testing
mkdir -p terraform/project/test/vpc/ && mkdir -p terraform/project/test/subnet/

## Create terraform.tfvars for test environment of vpc module
vi terraform/project/test/vpc/terraform.tfvars
--------------------------------------------
terragrunt = {
remote_state {
backend = "s3"
config {
bucket = "my-s3-terraform-backend-cloudaffaire"
key = "myapp/test/v1/vpc/terraform.tfstate"
region = "ap-south-1"
dynamodb_table = "my-dynamodb-terraform-backend-cloudaffaire"
}
}
terraform {
source = "git::git@github.com:CloudAffaire/terragrunt.git//vpc?ref=v1.0"
}
}
vpc_cidr = "10.0.0.0/16"
aws_region = "ap-south-1"
name = "myapp"
env = "test"
tag = "vpc"
version = "v1"
--------------------------------------------
:wq

## Create terraform.tfvars for test environment of subnet module
vi terraform/project/test/subnet/terraform.tfvars
--------------------------------------------
terragrunt = {
remote_state {
backend = "s3"
config {
bucket = "my-s3-terraform-backend-cloudaffaire"
key = "myapp/test/v1/subnet/terraform.tfstate"
region = "ap-south-1"
dynamodb_table = "my-dynamodb-terraform-backend-cloudaffaire"
}
}
terraform {
source = "git::git@github.com:CloudAffaire/terragrunt.git//subnet?ref=v1.0"
}
}
subnet_cidr = "10.0.0.0/24"
aws_region = "ap-south-1"
name = "myapp"
env = "test"
tag = "subnet"
version = "v1"
--------------------------------------------
:wq

## Create test resources using terragrunt
cd terraform/project/test/vpc/
terragrunt plan
terragrunt apply
cd ../subnet
terragrunt plan
terragrunt apply
cd

## cleanup ##
cd terraform/project/prod/subnet/
terragrunt destroy
cd ../vpc
terragrunt destroy
cd ../../dev/subnet/
terragrunt destroy
cd ../vpc
terragrunt destroy
cd ../../test/subnet/
terragrunt destroy
cd ../vpc
terragrunt destroy
cd ../../../terraform_backend/
terraform destroy
cd && rm -rf terraform
#login to github and delete terragrunt repository
